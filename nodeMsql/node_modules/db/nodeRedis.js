var redis = require('redis'),
	client = redis.createClient();
//用于连接指定服务器
//client = redis.createClient(6379,'127.0.1.1',{});
//
// redis默认连接数据库0,可以利用select选择指定数据库0~15 
exports.redisClient = function () {
	
	client.select('15',function(err) {
		if (err) {
			return false;
		}else{
			console.log('connect successed!');
		}
	});
/*  MULTI 
 *      MULTI 命令用于开启一个事务，它总是返回 OK 。  
 *      MULTI 执行之后， 客户端可以继续向服务器发送任意多条命令，  
 *      这些命令不会立即被执行， 而是被放到一个队列中， 当 EXEC命令被调用时， 所有队列中的命令才会被执行。 
 *      另一方面， 通过调用 DISCARD ， 客户端可以清空事务队列， 并放弃执行事务。 
*/
	/*client.multi([
		["username",'K','A','I',redis.print],
		['age','22'],
		['sex','woman']
		]).exec(function (err,replies) {
			console.log(replies);
		});
*/

}

exports.connectTest = function(){
	client.on('ready',function(err){
		console.log('redis has ready!');
	});


	//redis.print：简便的回调函数，测试时显示返回值
	client.on('connect',function(){//客户端触发connect同时它会发出ready，
		client.set('username','kaden',redis.print);//简单的设置键值对
		client.get('username',redis.print);//获取
		console.log('Redis connecting successed!');

		//哈希赋值(两种方法等效)
		client.hmset('tableName_Kaden',{'age':'22','sex':'man'},redis.print);
		client.hmset('tableName_Kai','age','21','sex','woman',function (err,res) {});
		//哈希获取
		client.hgetall('tableName_Kai',function(err,result){
			if (err) {console.log(err); return;}
			console.dir(result);//用于显示一个对象所有的属性和方法
			console.log('---------------------------------------hash end--------------------------');
		});

console.log('---------------------------------------event start--------------------------');
		//
		var username = 'user',
			password = 'password',
			sex = 'sex',
			age = 'age';

		client.sadd(username,'kaden1','kai1',redis.print);//集合操作，向集合key中添加N个元素，已存在元素的将忽略；
		client.sadd(password,'123456','456789',redis.print);//集合操作，向集合key中添加N个元素，已存在元素的将忽略；
		client.sadd(sex,'man1','woman1',redis.print);//集合操作，向集合key中添加N个元素，已存在元素的将忽略；
		client.sadd(age,'24','23',redis.print);//集合操作，向集合key中添加N个元素，已存在元素的将忽略；
		
		
		client.multi()
		.sismember(username,'kaden1')////元素value是否存在于集合key中，存在返回1，不存在返回0
		.smembers(username)//返回username中所有元素
		.exec(function(err,replies){
			console.log(' Got replyLength '+replies.length+' replies');
			replies.forEach(function(reply,index){
				console.log('reply '+index+':'+reply.toString());
			})
		})
		//client.quit();
		
	})

	client.on('end',function(err){
		console.log('redis connection has close!');
	});
}

exports.redisAdd =function (username,password,email,callback) {
	
	client.set(username,JSON.stringify([password,email]),function (err,result) {
		if (err) {console.log(err);}
		//console.log(JSON.parse(result));
		console.log(result);
		callback(JSON.parse(result));
	})
	/*client.set(username,password,email,function (err,result) {
		if (err) {console.log(err);}
		callback(result);
	});*/
	
};
exports.redisGet = function (username,callback) {
	/*client.get(username,function (err,result) {
		if (err) {console.log(err);};
		callback(result);
	});*/

	client.get(username,function (err,result) {
		if (err) {console.log(err);}
		callback(result);
	})
}
/*client.hmset('tableName_Kaden',{'age':'22','sex':'man'},redis.print);
		client.hmset('tableName_Kai','age','21','sex','woman',function (err,res) {});
		//哈希获取
		client.hgetall('tableName_Kai',function(err,result){*/



exports.connectClose = function(){
	
}